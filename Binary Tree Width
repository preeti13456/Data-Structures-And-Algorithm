#Given a binary tree root, return the maximum width of any level in the tree. The width of a level is the number of nodes that can fit between the leftmost node and the rightmost node.

#Constraints

#1 ≤ n ≤ 100,000 where n is the number of nodes in root
#Example 1
#Input
#Visualize
#root = [0, [1, [3, null, null], null], [2, [4, [5, null, null], [6, null, null]], null]]
#Output
#3
#Explanation
#The maximum width is 3 since between nodes 3 and 4, we can fit total of 3 nodes: [3, null, 4]

int solve(Tree* root)
{
//int n = root.size();
    if(root==NULL) return {};
    long long maxwid = 1;
    queue<Tree*>q;
    unordered_map<Tree*, long long>m;
    q.push(root);
    long long start = -1;
    long long end = -1;
    int level=0;
    while(!q.empty())
    {
        int size = q.size();
        long long start = 0, end = 0;
        for(int i=0; i<size; i++)
        {
            Tree* tp = q.front();
            q.pop();
            if(i==0) start = m[tp];
            if(i==size-1) end = m[tp];
            if(tp->left){
                q.push(tp->left);
                m[tp->left] = 2*m[tp];
            }
             if(tp->right){
                q.push(tp->right);
                m[tp->right] = 2*m[tp]+1;
            }
        }
        maxwid = max(maxwid, end-start+1);
    }
    return maxwid;




}
